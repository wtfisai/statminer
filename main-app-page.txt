// src/app/page.tsx

'use client';

import React, { useState, useEffect } from 'react';
import { ChatInterface } from '@/components/chat/chat-interface';
import { SettingsPanel } from '@/components/settings/settings-panel';
import { DatabasePanel } from '@/components/database/database-panel';
import { Toaster } from '@/components/ui/toaster';
import { useStore } from '@/lib/store';
import { v4 as uuidv4 } from 'uuid';

export default function Home() {
  const [sessionId] = useState(() => uuidv4());
  const [showSettings, setShowSettings] = useState(false);
  const [showDatabases, setShowDatabases] = useState(false);
  const [activeModels, setActiveModels] = useState<string[]>([]);
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    // Initialize app
    const initializeApp = async () => {
      try {
        // Check for saved API keys
        const savedKeys = localStorage.getItem('apiKeys');
        if (savedKeys) {
          const keys = JSON.parse(savedKeys);
          // Initialize LLM providers with saved keys
          Object.entries(keys).forEach(([service, key]) => {
            if (key) {
              // Set up provider
              console.log(`Initializing ${service}`);
            }
          });
        }

        // Check Neo4j connection
        const response = await fetch('/api/neo4j/verify');
        if (response.ok) {
          console.log('Neo4j connection verified');
        }

        setIsInitialized(true);
      } catch (error) {
        console.error('Initialization error:', error);
        setIsInitialized(true);
      }
    };

    initializeApp();
  }, []);

  const handleModelSelection = (models: string[]) => {
    setActiveModels(models);
  };

  const handleApiKeyUpdate = (service: string, key: string) => {
    // Save API key
    const savedKeys = JSON.parse(localStorage.getItem('apiKeys') || '{}');
    savedKeys[service] = key;
    localStorage.setItem('apiKeys', JSON.stringify(savedKeys));
  };

  if (!isInitialized) {
    return (
      <div className="flex items-center justify-center h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-400 mx-auto mb-4"></div>
          <p className="text-gray-400">Initializing Data Aggregator...</p>
        </div>
      </div>
    );
  }

  return (
    <main className="h-screen overflow-hidden">
      <ChatInterface
        sessionId={sessionId}
        activeModels={activeModels}
        onSettingsClick={() => setShowSettings(true)}
        onDatabaseClick={() => setShowDatabases(true)}
      />

      {showSettings && (
        <SettingsPanel
          onClose={() => setShowSettings(false)}
          onModelSelection={handleModelSelection}
          onApiKeyUpdate={handleApiKeyUpdate}
        />
      )}

      {showDatabases && (
        <DatabasePanel
          onClose={() => setShowDatabases(false)}
        />
      )}

      <Toaster />
    </main>
  );
}

// src/app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Data Aggregator - Multi-Model Research Assistant',
  description: 'Comprehensive data aggregation with multiple LLM models, government databases, and neural network visualization',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

// src/app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-gray-900;
}

::-webkit-scrollbar-thumb {
  @apply bg-gray-700 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-600;
}

/* Gradient text animation */
@keyframes gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.gradient-text {
  background: linear-gradient(270deg, #06b6d4, #3b82f6, #8b5cf6);
  background-size: 200% 200%;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: gradient 3s ease infinite;
}

/* Glass morphism effect */
.glass {
  background: rgba(17, 24, 39, 0.5);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(75, 85, 99, 0.3);
}

/* Neon glow effect */
.neon-glow {
  box-shadow: 0 0 20px rgba(6, 182, 212, 0.5),
              0 0 40px rgba(6, 182, 212, 0.3),
              0 0 60px rgba(6, 182, 212, 0.1);
}