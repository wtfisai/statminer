// src/components/chat/chat-interface.tsx

'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Loader2, Plus, Settings, Database, Brain } from 'lucide-react';
import { ChatMessage, ModelResponse, ComparisonResult } from '@/types';
import { LLMProviderManager } from '@/lib/llm-providers';
import { ComparisonPanel } from '../comparison-panel/comparison-panel';
import { DataVisualizationPanel } from '../data-viz/visualization-panel';
import { NeuralNetworkViewer } from '../neural-network/network-viewer';
import { motion, AnimatePresence } from 'framer-motion';

interface ChatInterfaceProps {
  sessionId: string;
  activeModels: string[];
  onSettingsClick: () => void;
  onDatabaseClick: () => void;
}

export const ChatInterface: React.FC<ChatInterfaceProps> = ({
  sessionId,
  activeModels,
  onSettingsClick,
  onDatabaseClick
}) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentResponses, setCurrentResponses] = useState<ModelResponse[]>([]);
  const [showComparison, setShowComparison] = useState(false);
  const [showNeuralNetwork, setShowNeuralNetwork] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const llmManager = useRef(new LLMProviderManager());

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      id: `msg-${Date.now()}`,
      role: 'user',
      content: input,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      // Parse active models
      const modelConfigs = activeModels.map(model => {
        const [providerId, modelName] = model.split(':');
        return { providerId, model: modelName };
      });

      // Send to all active models
      const responses = await llmManager.current.sendToMultipleModels(
        [...messages, userMessage],
        modelConfigs
      );

      setCurrentResponses(responses);

      // Add responses as messages
      responses.forEach(response => {
        if (!response.error) {
          const assistantMessage: ChatMessage = {
            id: `msg-${Date.now()}-${response.modelId}`,
            role: 'assistant',
            content: response.response,
            model: response.modelName,
            timestamp: new Date(),
            citations: response.citations
          };
          setMessages(prev => [...prev, assistantMessage]);
        }
      });

      // Show comparison if multiple models
      if (responses.length > 1) {
        setShowComparison(true);
      }
    } catch (error) {
      console.error('Error sending message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-full bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
      {/* Header */}
      <div className="border-b border-gray-700 bg-gray-900/50 backdrop-blur-sm">
        <div className="flex items-center justify-between px-6 py-4">
          <div className="flex items-center space-x-4">
            <Brain className="w-8 h-8 text-cyan-400" />
            <h1 className="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent">
              Data Aggregator
            </h1>
          </div>
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setShowNeuralNetwork(!showNeuralNetwork)}
              className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition-colors"
              title="Neural Network"
            >
              <Brain className="w-5 h-5 text-cyan-400" />
            </button>
            <button
              onClick={onDatabaseClick}
              className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition-colors"
              title="Database APIs"
            >
              <Database className="w-5 h-5 text-green-400" />
            </button>
            <button
              onClick={onSettingsClick}
              className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition-colors"
              title="Settings"
            >
              <Settings className="w-5 h-5 text-gray-400" />
            </button>
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex flex-1 overflow-hidden">
        {/* Chat Area */}
        <div className="flex-1 flex flex-col">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto px-6 py-4 space-y-4">
            <AnimatePresence>
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className={`flex ${
                    message.role === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  <div
                    className={`flex items-start space-x-3 max-w-3xl ${
                      message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                    }`}
                  >
                    <div
                      className={`p-2 rounded-full ${
                        message.role === 'user'
                          ? 'bg-blue-500'
                          : 'bg-gradient-to-br from-cyan-500 to-blue-600'
                      }`}
                    >
                      {message.role === 'user' ? (
                        <User className="w-5 h-5 text-white" />
                      ) : (
                        <Bot className="w-5 h-5 text-white" />
                      )}
                    </div>
                    <div
                      className={`px-4 py-2 rounded-2xl ${
                        message.role === 'user'
                          ? 'bg-blue-500/20 border border-blue-500/30'
                          : 'bg-gray-800/50 border border-gray-700'
                      }`}
                    >
                      {message.model && (
                        <div className="text-xs text-gray-400 mb-1">
                          {message.model}
                        </div>
                      )}
                      <div className="text-gray-100 whitespace-pre-wrap">
                        {message.content}
                      </div>
                      {message.citations && message.citations.length > 0 && (
                        <div className="mt-2 pt-2 border-t border-gray-700">
                          <div className="text-xs text-gray-400">
                            Citations: {message.citations.length}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            {isLoading && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex items-center space-x-2 text-gray-400"
              >
                <Loader2 className="w-4 h-4 animate-spin" />
                <span>Processing with {activeModels.length} models...</span>
              </motion.div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Input Area */}
          <div className="border-t border-gray-700 bg-gray-900/50 backdrop-blur-sm p-4">
            <div className="flex items-center space-x-4">
              <button className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition-colors">
                <Plus className="w-5 h-5 text-gray-400" />
              </button>
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="Ask for data, statistics, or analysis..."
                className="flex-1 px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-gray-100 placeholder-gray-500 focus:outline-none focus:border-cyan-500 transition-colors"
              />
              <button
                onClick={handleSendMessage}
                disabled={!input.trim() || isLoading}
                className={`p-2 rounded-lg transition-all ${
                  input.trim() && !isLoading
                    ? 'bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 text-white'
                    : 'bg-gray-800 text-gray-500 cursor-not-allowed'
                }`}
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
            <div className="mt-2 text-xs text-gray-500">
              Active Models: {activeModels.join(', ') || 'None selected'}
            </div>
          </div>
        </div>

        {/* Side Panels */}
        {showComparison && currentResponses.length > 1 && (
          <div className="w-96 border-l border-gray-700 bg-gray-900/50 backdrop-blur-sm">
            <ComparisonPanel
              responses={currentResponses}
              onClose={() => setShowComparison(false)}
            />
          </div>
        )}

        {showNeuralNetwork && (
          <div className="w-96 border-l border-gray-700 bg-gray-900/50 backdrop-blur-sm">
            <NeuralNetworkViewer
              datasetId={sessionId}
              onClose={() => setShowNeuralNetwork(false)}
            />
          </div>
        )}
      </div>
    </div>
  );
};